{"version":3,"sources":["component/toolbutton.js","component/img/wechat-footer-image.webp","component/img/default-user.png","component/dialogue.js","component/wechat.js","component/preview.js","component/toolbar.js","App.js","reportWebVitals.js","index.js"],"names":["Component","Dialogue","props","className","type","src","defaultImg","newMessage","onClick","delF","id","Wechat","this","receipant","date","messages","map","item","text","class","Preview","ref","React","createRef","node","document","getElementsByClassName","html2canvas","scale","scrollY","window","then","canvas","toDataURL","replace","saveAs","uri","filename","link","createElement","download","href","body","appendChild","click","removeChild","open","console","log","Fragment","Grid","xs","sm","md","spacing","justify","Paper","elevation","style","height","width","backgroundColor","Typography","variant","color","Button","size","margin","startIcon","toImg","bind","Toolbar","state","list","radioValue","value","setState","key","newItem","push","newList","filter","paddingBottom","ButtonGroup","orientation","TextField","label","onChange","e","handleReceipant","target","addMessage","multiline","rows","updateInput","RadioGroup","row","aria-label","name","defaultValue","FormControlLabel","checked","handleRadio","control","Radio","labelPlacement","handleDate","InputLabelProps","shrink","deleteMessage","App","container","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.dfffd908.chunk.js","sourcesContent":["import { ButtonGroup } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport React, {Component} from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nclass Toolbutton extends Component{\r\n   \r\n    render(){\r\n       return(\r\n         <div></div>\r\n       \r\n       );\r\n    }\r\n}\r\n\r\nexport default Toolbutton;","export default __webpack_public_path__ + \"static/media/wechat-footer-image.8ca3528e.webp\";","export default __webpack_public_path__ + \"static/media/default-user.94cf7531.png\";","import React, {Component} from 'react';\r\nimport  defaultImg from './img/default-user.png';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\n\r\nfunction Dialogue(props){\r\n    return(\r\n      <div className={'chatMessage '+ props.type}>\r\n         <img src= {defaultImg} className=\"avatar\"/>\r\n        <div className=\"dialogue\">\r\n           <p>{props.newMessage}</p>         \r\n        </div>\r\n        <div className=\"cancel\" onClick={() => props.delF(props.id)}><CancelIcon/></div>\r\n        {/*<img src= {defaultImg} style={{}}/>*/}\r\n     </div>\r\n    )\r\n} \r\n\r\nexport default Dialogue","import React, {Component} from 'react';\r\nimport '../App.css';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Input from '@material-ui/core/Input';\r\nimport reply_tool_add from './img/wechat-footer-image.webp';\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport Dialogue from './dialogue';\r\n\r\nclass Wechat extends Component{\r\n    render(){\r\n        return(\r\n           <div className =\"wechat\">\r\n                    <div className=\"chat-header\">\r\n                         <span className=\"recipient\"> \r\n                            <ArrowBackIosIcon/>\r\n                         </span>\r\n                         <span className=\"recipient\" > \r\n                            <span className=\"name\">{this.props.receipant}</span> \r\n                         </span>\r\n                        <span className=\"dots\">&#8943;</span>\r\n                     </div>\r\n                     <div className=\"chat-content\">\r\n                        <span className=\"message-date\">{this.props.date}</span>  \r\n                        {this.props.messages.map(item => {return(<Dialogue newMessage={item.text} type={item.type} delF={this.props.delF} id={item.id}/>)})}\r\n                     </div>\r\n                      <footer>\r\n                         <i class=\"icon icon-voice\"></i>\r\n                          <input type=\"text\" class=\"text-input\"/>\r\n                          <i class=\"icon icon-face\"></i>\r\n                         <i class=\"icon icon-plus\"></i>\r\n                      </footer>\r\n                \r\n                     {/* 逃げるは恥だが役に立つ (不好的做法)\r\n                        <Paper elevation={0} style={{height:60, width:'100%',background:'inherit', position:'absolute', bottom:0}}>\r\n                            <img src= {reply_tool_add} style={{width:'100%',height:'100%',position:'relative',top:'5px'}}/>\r\n                         </Paper>\r\n                     \r\n                     */}\r\n                \r\n           </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Wechat;","import React, {Component} from 'react';\r\nimport '../App.css';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\nimport Wechat from './wechat';\r\nimport html2canvas from 'html2canvas';\r\n\r\nclass Preview extends Component{\r\n    constructor(){\r\n        super();\r\n        this.ref = React.createRef();\r\n    }\r\n    toImg(){\r\n        const node = document.getElementsByClassName('wechat')[0];\r\n        html2canvas(node,{\r\n         scale: 2,\r\n         scrollY: -window.scrollY\r\n        }).then(\r\n            canvas =>{\r\n              var image = canvas.toDataURL(\"image/png\").replace(\"image/png\",\"image/octet-stream\");\r\n              //console.log(image);\r\n              //window.location.href = image;\r\n              this.saveAs(canvas.toDataURL(1), 'fakechat.png');\r\n            }\r\n        )\r\n    }\r\n\r\n    saveAs(uri, filename) {\r\n\r\n        var link = document.createElement('a');\r\n    \r\n        if (typeof link.download === 'string') {\r\n    \r\n            link.href = uri;\r\n            link.download = filename;\r\n    \r\n            //Firefox requires the link to be in the body\r\n            document.body.appendChild(link);\r\n    \r\n            //simulate click\r\n            link.click();\r\n    \r\n            //remove the link when done\r\n            document.body.removeChild(link);\r\n    \r\n        } else {\r\n            window.open(uri);\r\n        }\r\n    }\r\n\r\n  \r\n\r\n    componentDidMount(){\r\n        console.log(document.getElementsByClassName('wechat')[0])\r\n    }\r\n    render(){\r\n        return(\r\n            <React.Fragment>\r\n              <Grid item  xs={12} sm={12} md ={6} spacing={1} justify =\"center\">\r\n                 <Paper elevation={3} style={{height:700, width:'100%',backgroundColor:'transparent'}}>\r\n                   <Typography variant=\"h6\" style={{color:'#fff'}}>\r\n                       Preview\r\n                   </Typography>\r\n                    <Wechat receipant={this.props.receipant} messages={this.props.messages} type={this.props.type} ref={this.ref} date={this.props.date} delF={this.props.delF}/>\r\n                 </Paper> \r\n                 <Grid item  xs={12} justify =\"center\" >\r\n                  <Button variant=\"contained\"  \r\n                  size=\"large\" \r\n                  style={{margin:'10px',backgroundColor: '#ffffff'}} \r\n                  startIcon={<GetAppIcon/>} onClick={this.toImg.bind(this)}>\r\n                      Download\r\n                </Button>\r\n               </Grid>              \r\n             </Grid>     \r\n\r\n         </React.Fragment>                   \r\n        );\r\n    }\r\n}\r\n\r\nexport default Preview;","import React, {Component} from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Toolbutton from './toolbutton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Preview from './preview';\r\nimport Button from '@material-ui/core/Button';\r\nimport { ButtonGroup } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\n\r\nclass Toolbar extends Component{\r\n     constructor(){\r\n         super()\r\n         this.state = {\r\n             receipant: \"\",\r\n             list:[],\r\n             newMessage: \"\",\r\n             radioValue: \"chatMessage-right\",\r\n             date: \"\",\r\n             id: 0\r\n         }\r\n     }\r\n\r\n     handleReceipant(value){\r\n         this.setState({receipant:value})\r\n     }\r\n\r\n     handleRadio(value){\r\n         this.setState({radioValue:value})\r\n         console.log(this.state.radioValue)\r\n     }\r\n\r\n     updateInput(key,value){\r\n        this.setState({\r\n            [key]:value\r\n        })\r\n     }\r\n\r\n     handleDate(value){\r\n       this.setState({date:value});\r\n       console.log(this.state.date);\r\n     }\r\n\r\n     addMessage(){\r\n          const newItem = {\r\n            text: this.state.newMessage,\r\n            type:this.state.radioValue,\r\n            id:this.state.id\r\n          }\r\n          const list = [...this.state.list]\r\n          if(newItem.text != \"\"){\r\n            list.push(newItem)\r\n            this.setState({\r\n              list,\r\n              id: this.state.id+1\r\n            })\r\n           // console.log(this.state.id)\r\n          }\r\n     }\r\n\r\n     deleteMessage(id){\r\n        const list = [...this.state.list];\r\n        const newList = list.filter(item => item.id !== id);\r\n        this.setState({\r\n          list:newList\r\n        })\r\n    }\r\n\r\n    render(){\r\n       return(\r\n        <React.Fragment>  \r\n        <Grid item  xs={12} sm={12} md ={3} justify =\"center\">\r\n          <Paper elevation={3} style={{paddingBottom:50,width:'100%'}}>                \r\n          <Typography variant=\"h6\">\r\n           Toolbar\r\n          </Typography>\r\n          <ButtonGroup orientation=\"vertical\">\r\n             <TextField id=\"standard-basic\" label=\"Receipant\" \r\n             onChange={e => this.handleReceipant(e.target.value)}/> \r\n             <Button onClick={e => this.addMessage()}>\r\n                 Add Messasge\r\n             </Button>\r\n             <TextField id=\"standard-basic\" label=\"Message\" multiline  rows={3} \r\n             onChange={e => this.updateInput(\"newMessage\",e.target.value)}/>\r\n                <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"top\">\r\n                <FormControlLabel\r\n                      checked={this.state.radioValue === \"chatMessage-right\"}\r\n                      value=\"chatMessage-right\"\r\n                      onChange={e => this.handleRadio(e.target.value)}\r\n                      control={<Radio color=\"primary\" />}\r\n                      label=\"Yours\"\r\n                      labelPlacement=\"start\"\r\n                    />\r\n                    <FormControlLabel\r\n                      checked={this.state.radioValue === \"chatMessage-left\"}\r\n                      value=\"chatMessage-left\"\r\n                      onChange={e => this.handleRadio(e.target.value)}\r\n                      control={<Radio color=\"primary\" />}\r\n                      label=\"recipient's\"\r\n                      labelPlacement=\"start\"\r\n                    />            \r\n                </RadioGroup> \r\n             <Button>\r\n                 Select image\r\n             </Button>\r\n             <Button>\r\n                 Select Wallpaper\r\n             </Button>\r\n             <Button>\r\n                 Select Your Icon\r\n             </Button>\r\n             <Button>\r\n                 Select receipant Icon\r\n             </Button>\r\n             <TextField\r\n                id=\"date\"\r\n                label=\"Date of message\"\r\n                type=\"date\"\r\n                onChange={\r\n                  e => this.handleDate(e.target.value)\r\n                }\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n              />\r\n           </ButtonGroup>\r\n         </Paper>  \r\n        </Grid>\r\n        <Preview receipant={this.state.receipant} messages={this.state.list} type={this.state.radioValue} date={this.state.date} delF={this.deleteMessage.bind(this)}/>\r\n       </React.Fragment>\r\n       );\r\n    }\r\n}\r\n\r\nexport default Toolbar;","import './App.css';\nimport Toolbar from './component/toolbar';\nimport Preview from './component/preview';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Grid container spacing={2} justify =\"center\" style={{width:'90%', margin: '0 auto',height:600}}>\n         <Grid item  xs={12}>\n           <h2 className=\"title\">\n              WeChat Message Generator\n           </h2>\n         </Grid>\n         <Grid container spacing={2}  justify =\"center\">\n            <Toolbar/>\n          </Grid>\n        \n      </Grid>\n      \n    </div>\n  );\n}\n\nexport default App;\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}